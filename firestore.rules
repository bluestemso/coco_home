rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isMember(members) {
      return request.auth.uid in members;
    }

    function hasRequiredFields(data) {
      return data.name is string &&
        data.name.size() > 0 &&
        data.description is string &&
        data.memberIds is list &&
        data.createdBy is string &&
        data.createdAt is timestamp &&
        data.updatedAt is timestamp;
    }

    // User document rules
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // User's expenses subcollection
      match /expenses/{expenseId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // User's categories subcollection
      match /categories/{categoryId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Households collection rules
    match /households/{householdId} {
      allow read: if isAuthenticated() && (
        isMember(resource.data.memberIds) || 
        isOwner(resource.data.createdBy)
      );
      
      allow create: if isAuthenticated() && 
        hasRequiredFields(request.resource.data) &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.memberIds.hasAll([request.auth.uid]);
      
      allow update: if isAuthenticated() && (
        isOwner(resource.data.createdBy) ||
        isMember(resource.data.memberIds)
      ) && hasRequiredFields(request.resource.data);
      
      allow delete: if isAuthenticated() && 
        isOwner(resource.data.createdBy);
    }

    // Families collection rules
    match /families/{familyId} {
      allow read: if isAuthenticated() && (
        isMember(resource.data.memberIds) || 
        isOwner(resource.data.createdBy)
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.memberIds.hasAll([request.auth.uid]) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.description is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
      
      allow update: if isAuthenticated() && (
        isOwner(resource.data.createdBy) ||
        isMember(resource.data.memberIds)
      ) && (
        !('name' in request.resource.data) || 
        (request.resource.data.name is string && request.resource.data.name.size() > 0)
      ) && (
        !('description' in request.resource.data) || 
        request.resource.data.description is string
      );
      
      allow delete: if isAuthenticated() && 
        isOwner(resource.data.createdBy);
    }
  }
} 